<alloy builddate="2021-11-03T15:25:43.736Z">

    <instance bitwidth="4" maxseq="4" mintrace="6" maxtrace="6" command="Run show for 6..6 steps, 6 Node" filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" tracelength="6" backloop="4">

        <sig label="seq/Int" ID="0" parentID="1" builtin="yes">
        </sig>

        <sig label="Int" ID="1" parentID="2" builtin="yes">
        </sig>

        <sig label="String" ID="3" parentID="2" builtin="yes">
        </sig>

        <sig label="this/Node" ID="4" parentID="2" var="yes">
            <atom label="Node$0"/>
            <atom label="Node$1"/>
            <atom label="Node$2"/>
            <atom label="Node$3"/>
            <atom label="Node$4"/>
            <atom label="Node$5"/>
        </sig>

        <field label="edge" ID="5" parentID="4" var="yes">
            <tuple> <atom label="Node$0"/> <atom label="Node$5"/> </tuple>
            <tuple> <atom label="Node$1"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$2"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$3"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$5"/> <atom label="Node$3"/> </tuple>
            <types> <type ID="4"/> <type ID="4"/> </types>
        </field>

        <sig label="univ" ID="2" builtin="yes" var="yes">
        </sig>

    </instance>
    <instance bitwidth="4" maxseq="4" mintrace="6" maxtrace="6" command="Run show for 6..6 steps, 6 Node" filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" tracelength="6" backloop="4">

        <sig label="seq/Int" ID="0" parentID="1" builtin="yes">
        </sig>

        <sig label="Int" ID="1" parentID="2" builtin="yes">
        </sig>

        <sig label="String" ID="3" parentID="2" builtin="yes">
        </sig>

        <sig label="this/Node" ID="4" parentID="2" var="yes">
            <atom label="Node$0"/>
            <atom label="Node$1"/>
            <atom label="Node$2"/>
            <atom label="Node$3"/>
            <atom label="Node$4"/>
            <atom label="Node$5"/>
        </sig>

        <field label="edge" ID="5" parentID="4" var="yes">
            <tuple> <atom label="Node$0"/> <atom label="Node$5"/> </tuple>
            <tuple> <atom label="Node$1"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$2"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$3"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$4"/> <atom label="Node$0"/> </tuple>
            <tuple> <atom label="Node$5"/> <atom label="Node$3"/> </tuple>
            <types> <type ID="4"/> <type ID="4"/> </types>
        </field>

        <sig label="univ" ID="2" builtin="yes" var="yes">
        </sig>

    </instance>
    <instance bitwidth="4" maxseq="4" mintrace="6" maxtrace="6" command="Run show for 6..6 steps, 6 Node" filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" tracelength="6" backloop="4">

        <sig label="seq/Int" ID="0" parentID="1" builtin="yes">
        </sig>

        <sig label="Int" ID="1" parentID="2" builtin="yes">
        </sig>

        <sig label="String" ID="3" parentID="2" builtin="yes">
        </sig>

        <sig label="this/Node" ID="4" parentID="2" var="yes">
            <atom label="Node$0"/>
            <atom label="Node$1"/>
            <atom label="Node$2"/>
            <atom label="Node$3"/>
            <atom label="Node$4"/>
            <atom label="Node$5"/>
        </sig>

        <field label="edge" ID="5" parentID="4" var="yes">
            <tuple> <atom label="Node$0"/> <atom label="Node$5"/> </tuple>
            <tuple> <atom label="Node$1"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$2"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$4"/> <atom label="Node$0"/> </tuple>
            <tuple> <atom label="Node$5"/> <atom label="Node$3"/> </tuple>
            <types> <type ID="4"/> <type ID="4"/> </types>
        </field>

        <sig label="univ" ID="2" builtin="yes" var="yes">
        </sig>

    </instance>
    <instance bitwidth="4" maxseq="4" mintrace="6" maxtrace="6" command="Run show for 6..6 steps, 6 Node" filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" tracelength="6" backloop="4">

        <sig label="seq/Int" ID="0" parentID="1" builtin="yes">
        </sig>

        <sig label="Int" ID="1" parentID="2" builtin="yes">
        </sig>

        <sig label="String" ID="3" parentID="2" builtin="yes">
        </sig>

        <sig label="this/Node" ID="4" parentID="2" var="yes">
            <atom label="Node$0"/>
            <atom label="Node$1"/>
            <atom label="Node$2"/>
            <atom label="Node$4"/>
            <atom label="Node$5"/>
        </sig>

        <field label="edge" ID="5" parentID="4" var="yes">
            <tuple> <atom label="Node$0"/> <atom label="Node$5"/> </tuple>
            <tuple> <atom label="Node$1"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$2"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$4"/> <atom label="Node$0"/> </tuple>
            <types> <type ID="4"/> <type ID="4"/> </types>
        </field>

        <sig label="univ" ID="2" builtin="yes" var="yes">
        </sig>

    </instance>
    <instance bitwidth="4" maxseq="4" mintrace="6" maxtrace="6" command="Run show for 6..6 steps, 6 Node" filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" tracelength="6" backloop="4">

        <sig label="seq/Int" ID="0" parentID="1" builtin="yes">
        </sig>

        <sig label="Int" ID="1" parentID="2" builtin="yes">
        </sig>

        <sig label="String" ID="3" parentID="2" builtin="yes">
        </sig>

        <sig label="this/Node" ID="4" parentID="2" var="yes">
            <atom label="Node$0"/>
            <atom label="Node$1"/>
            <atom label="Node$2"/>
            <atom label="Node$4"/>
        </sig>

        <field label="edge" ID="5" parentID="4" var="yes">
            <tuple> <atom label="Node$1"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$2"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$4"/> <atom label="Node$0"/> </tuple>
            <types> <type ID="4"/> <type ID="4"/> </types>
        </field>

        <sig label="univ" ID="2" builtin="yes" var="yes">
        </sig>

    </instance>
    <instance bitwidth="4" maxseq="4" mintrace="6" maxtrace="6" command="Run show for 6..6 steps, 6 Node" filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" tracelength="6" backloop="4">

        <sig label="seq/Int" ID="0" parentID="1" builtin="yes">
        </sig>

        <sig label="Int" ID="1" parentID="2" builtin="yes">
        </sig>

        <sig label="String" ID="3" parentID="2" builtin="yes">
        </sig>

        <sig label="this/Node" ID="4" parentID="2" var="yes">
            <atom label="Node$1"/>
            <atom label="Node$2"/>
            <atom label="Node$4"/>
        </sig>

        <field label="edge" ID="5" parentID="4" var="yes">
            <tuple> <atom label="Node$1"/> <atom label="Node$4"/> </tuple>
            <tuple> <atom label="Node$2"/> <atom label="Node$4"/> </tuple>
            <types> <type ID="4"/> <type ID="4"/> </types>
        </field>

        <sig label="univ" ID="2" builtin="yes" var="yes">
        </sig>

    </instance>

    <source filename="/Users/atdyer/research/alloy/alloy6/Untitled 2.als" content="open util/graph[Node]&#x000a;&#x000a;var sig Node {&#x000a;  var edge: lone Node&#x000a;}&#x000a;&#x000a;pred addNode {&#x000a;  #edge&apos; = add[#edge, 1]&#x000a;  edge in edge&apos;&#x000a;}&#x000a;&#x000a;pred removeNode {&#x000a;  #edge&apos; = sub[#edge, 1]&#x000a;  edge&apos; in edge&#x000a;}&#x000a;&#x000a;fact transitions {&#x000a;  always {&#x000a;    weaklyConnected[edge]&#x000a;    noSelfLoops[edge]&#x000a;    (addNode or removeNode)&#x000a;  }&#x000a;  eventually {&#x000a;    #edge = 6&#x000a;  }&#x000a;}&#x000a;&#x000a;pred show {}&#x000a;&#x000a;run show for 6 Node, exactly 6 steps"/>

    <source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

    <source filename="/$alloy4$/models/util/graph.als" content="module util/graph[node]&#x000a;&#x000a;/*&#x000a; * Utilities for some common operations and contraints&#x000a; * on graphs.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;open util/relation as rel&#x000a;&#x000a;/** graph in undirected */&#x000a;pred undirected [r: node-&gt;node] {&#x000a;  symmetric[r]&#x000a;}&#x000a;&#x000a;/** graph has no self-loops */&#x000a;pred noSelfLoops[r: node-&gt;node] {&#x000a;  irreflexive[r]&#x000a;}&#x000a;&#x000a;/** graph is weakly connected */&#x000a;pred weaklyConnected[r: node-&gt;node] {&#x000a;  all n1, n2: node | n1 in n2.*(r + ~r)  // Changed from ^ to * to permit singleton&#x000a;}&#x000a;&#x000a;/** graph is strongly connected */&#x000a;pred stronglyConnected[r: node-&gt;node] {&#x000a;  all n1, n2: node | n1 in n2.*r         // Changed from ^ to * to permit singleton&#x000a;}&#x000a;&#x000a;/** graph is rooted at root */&#x000a;pred rootedAt[r: node-&gt;node, root: node] {&#x000a;  node in root.*r&#x000a;}&#x000a;&#x000a;/** graph is a ring */&#x000a;pred ring [r: node-&gt;node] {&#x000a;  all n: node | one n.r &amp;&amp; rootedAt[r, n]&#x000a;}&#x000a;&#x000a;/** graph is a dag */&#x000a;pred dag [r: node-&gt;node] {&#x000a;  acyclic[r, node]&#x000a;}&#x000a;&#x000a;/** graph is a forest */&#x000a;pred forest [r: node-&gt;node] {&#x000a;  dag[r]&#x000a;  all n: node | lone r.n&#x000a;}&#x000a;&#x000a;/** graph is a tree */&#x000a;pred tree [r: node-&gt;node] {&#x000a;  forest[r]&#x000a;  lone root: node | no r.root&#x000a;}&#x000a;&#x000a;/** graph is a tree rooted at root */&#x000a;pred treeRootedAt[r: node-&gt;node, root: node] {&#x000a;  forest[r]&#x000a;  rootedAt[r, root]&#x000a;}&#x000a;&#x000a;/** returns the roots of the graph */&#x000a;fun roots [r: node-&gt;node] : set node {&#x000a;  node - node.^r&#x000a;}&#x000a;&#x000a;/** returns the leaves of the grpah */&#x000a;fun leaves [r: node-&gt;node] : set node {&#x000a;  node - node.^~r&#x000a;}&#x000a;&#x000a;/** returns the inner nodes (non-leaves) of the graph */&#x000a;fun  innerNodes [r: node-&gt;node] : set node {&#x000a;  node - leaves[r]&#x000a;}&#x000a;"/>

    <source filename="/$alloy4$/models/util/relation.als" content="module util/relation&#x000a;&#x000a;/*&#x000a; * Utilities for some common operations and constraints&#x000a; * on binary relations. The keyword &apos;univ&apos; represents the&#x000a; * top-level type, which all other types implicitly extend.&#x000a; * Therefore, all the functions and predicates in this model&#x000a; * may be applied to binary relations of any type.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;/** returns the domain of a binary relation */&#x000a;fun dom [r: univ-&gt;univ] : set (r.univ) { r.univ }&#x000a;&#x000a;/** returns the range of a binary relation */&#x000a;fun ran [r: univ-&gt;univ] : set (univ.r) { univ.r }&#x000a;&#x000a;/** r is total over the domain s */&#x000a;pred total [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | some x.r&#x000a;}&#x000a;&#x000a;/** r is a partial function over the domain s */&#x000a;pred functional [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | lone x.r&#x000a;}&#x000a;&#x000a;/** r is a total function over the domain s */&#x000a;pred function [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | one x.r&#x000a;}&#x000a;&#x000a;/** r is surjective over the codomain s */&#x000a;pred surjective [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | some r.x&#x000a;}&#x000a;&#x000a;/** r is injective */&#x000a;pred injective [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | lone r.x&#x000a;}&#x000a;&#x000a;/** r is bijective over the codomain s */&#x000a;pred bijective[r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | one r.x&#x000a;}&#x000a;&#x000a;/** r is a bijection over the domain d and the codomain c */&#x000a;pred bijection[r: univ-&gt;univ, d, c: set univ] {&#x000a;  function[r, d] &amp;&amp; bijective[r, c]&#x000a;}&#x000a;&#x000a;/** r is reflexive over the set s */&#x000a;pred reflexive [r: univ -&gt; univ, s: set univ] {s&lt;:iden in r}&#x000a;&#x000a;/** r is irreflexive */&#x000a;pred irreflexive [r: univ -&gt; univ] {no iden &amp; r}&#x000a;&#x000a;/** r is symmetric */&#x000a;pred symmetric [r: univ -&gt; univ] {~r in r}&#x000a;&#x000a;/** r is anti-symmetric */&#x000a;pred antisymmetric [r: univ -&gt; univ] {~r &amp; r in iden}&#x000a;&#x000a;/** r is transitive */&#x000a;pred transitive [r: univ -&gt; univ] {r.r in r}&#x000a;&#x000a;/** r is acyclic over the set s */&#x000a;pred acyclic[r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | x !in x.^r&#x000a;}&#x000a;&#x000a;/** r is complete over the set s */&#x000a;pred complete[r: univ-&gt;univ, s: univ] {&#x000a;  all x,y:s | (x!=y =&gt; x-&gt;y in (r + ~r))&#x000a;}&#x000a;&#x000a;/** r is a preorder (or a quasi-order) over the set s */&#x000a;pred preorder [r: univ -&gt; univ, s: set univ] {&#x000a;  reflexive[r, s]&#x000a;  transitive[r]&#x000a;}&#x000a;&#x000a;/** r is an equivalence relation over the set s */&#x000a;pred equivalence [r: univ-&gt;univ, s: set univ] {&#x000a;  preorder[r, s]&#x000a;  symmetric[r]&#x000a;}&#x000a;&#x000a;/** r is a partial order over the set s */&#x000a;pred partialOrder [r: univ -&gt; univ, s: set univ] {&#x000a;  preorder[r, s]&#x000a;  antisymmetric[r]&#x000a;}&#x000a;&#x000a;/** r is a total order over the set s */&#x000a;pred totalOrder [r: univ -&gt; univ, s: set univ] {&#x000a;  partialOrder[r, s]&#x000a;  complete[r, s]&#x000a;}&#x000a;"/>

</alloy>